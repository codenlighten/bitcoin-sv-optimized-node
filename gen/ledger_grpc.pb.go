// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ledger.proto

package ledgerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ledger_GetOutputs_FullMethodName = "/metamorph.ledger.v1.Ledger/GetOutputs"
	Ledger_ApplyBlock_FullMethodName = "/metamorph.ledger.v1.Ledger/ApplyBlock"
	Ledger_Health_FullMethodName     = "/metamorph.ledger.v1.Ledger/Health"
)

// LedgerClient is the client API for Ledger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerClient interface {
	GetOutputs(ctx context.Context, in *GetOutputsRequest, opts ...grpc.CallOption) (*GetOutputsResponse, error)
	ApplyBlock(ctx context.Context, in *ApplyBlockRequest, opts ...grpc.CallOption) (*ApplyBlockResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type ledgerClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerClient(cc grpc.ClientConnInterface) LedgerClient {
	return &ledgerClient{cc}
}

func (c *ledgerClient) GetOutputs(ctx context.Context, in *GetOutputsRequest, opts ...grpc.CallOption) (*GetOutputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOutputsResponse)
	err := c.cc.Invoke(ctx, Ledger_GetOutputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) ApplyBlock(ctx context.Context, in *ApplyBlockRequest, opts ...grpc.CallOption) (*ApplyBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyBlockResponse)
	err := c.cc.Invoke(ctx, Ledger_ApplyBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, Ledger_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServer is the server API for Ledger service.
// All implementations must embed UnimplementedLedgerServer
// for forward compatibility.
type LedgerServer interface {
	GetOutputs(context.Context, *GetOutputsRequest) (*GetOutputsResponse, error)
	ApplyBlock(context.Context, *ApplyBlockRequest) (*ApplyBlockResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedLedgerServer()
}

// UnimplementedLedgerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerServer struct{}

func (UnimplementedLedgerServer) GetOutputs(context.Context, *GetOutputsRequest) (*GetOutputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputs not implemented")
}
func (UnimplementedLedgerServer) ApplyBlock(context.Context, *ApplyBlockRequest) (*ApplyBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyBlock not implemented")
}
func (UnimplementedLedgerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedLedgerServer) mustEmbedUnimplementedLedgerServer() {}
func (UnimplementedLedgerServer) testEmbeddedByValue()                {}

// UnsafeLedgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServer will
// result in compilation errors.
type UnsafeLedgerServer interface {
	mustEmbedUnimplementedLedgerServer()
}

func RegisterLedgerServer(s grpc.ServiceRegistrar, srv LedgerServer) {
	// If the following call pancis, it indicates UnimplementedLedgerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ledger_ServiceDesc, srv)
}

func _Ledger_GetOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).GetOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ledger_GetOutputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).GetOutputs(ctx, req.(*GetOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_ApplyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).ApplyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ledger_ApplyBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).ApplyBlock(ctx, req.(*ApplyBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ledger_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ledger_ServiceDesc is the grpc.ServiceDesc for Ledger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ledger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metamorph.ledger.v1.Ledger",
	HandlerType: (*LedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOutputs",
			Handler:    _Ledger_GetOutputs_Handler,
		},
		{
			MethodName: "ApplyBlock",
			Handler:    _Ledger_ApplyBlock_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Ledger_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger.proto",
}
